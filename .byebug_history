continue
last_updated_by == 'user'
current_admin_user
self.admin_user
self.user
last_updated_by == 'admin'
self
continue
@current_user
continue
last_updated_by_changed?
last_updated_by
self.last_updated_by_is_changed?
continue
params.merge(last_updated_by: "user" )
continue
current_admin_user
current_user
continue
self.user.role
self.user
self.role
self
continue
@current_user.loans.requested_loans
@current_user.loan.requested_loans
User.requested_loans
user.requested_loans
@current_user.requested_loans
continue
params
continue
user.role == 'user'
user.role == 0
user.role
user.present?
continue
current_user.role
current_user
continue
user
continue
authorize Loan, :create?
loan = @current_user.loans.new(loan_params.merge(state: 'requested'))
loan_params
params
continue
loan_params
@current_user.loans
loan = @current_user.loans.new(loan_params.merge(state: 'requested'))
authorize Loan, :create?
current_user
@current_user
continue
@current_user
continue
authorize Loan, :create?
params
continue
@current_user
continue
@current_user
continue
 @current_user
 @current_user.as_json
user
 @current_user
params[:id].to_i != @current_user.id 
continue
@current_user.id
params[:id]
continue
@current_user.email
@current_user
@current_user = User.find(decoded[:user_id])
decoded = JsonWebToken.decode(token)
request.headers['Authorization']
token = request.headers['Authorization']&.split(' ')&.last
continue
request.headers
params
continue
headers[:token]
headers
params[:headers]
continue
params[:token]
params
continue
token
body = JWT.decode(token, SECRET_KEY)[0]
continue
payload[:exp] = exp.to_i
continue
payload[:exp]
payload[:exp] = exp.to_i
exp.to_i
payload[:exp] = exp.to_i
exp = 5.minutes.from_now
payload
continue
payload
SECRET_KEY
continue
JsonWebToken.encode(self.id)
self.id
self
